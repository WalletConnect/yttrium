name: Build and Release Yttrium

on:
#   workflow_dispatch:
#     inputs:
#       version:
#         description: 'Version number for the release (e.g., 0.1.0)'
#         required: true
  push:
    branches:
      - 'xcframework'

env:
  CARGO_TERM_COLOR: always
  SKIP_RELEASE: true
  TARGET_BRANCH: ${{ github.head_ref }} # ${{ github.head_ref || 'main' }}

jobs:
  release-swift-package:
    runs-on: macos-14
    strategy:
      matrix:
        config:
          - debug
    steps:
      - uses: actions/checkout@v4
      - name: Run sccache-cache
        uses: mozilla-actions/sccache-action@v0.0.4
      - uses: pnpm/action-setup@v4
        with:
          version: 9
      - name: Build and Package Rust XCFramework
        env:
          GITHUB_VERSION: ${{ github.event.inputs.version }}
        run: |
          rustup update stable && rustup default stable
          git submodule update --init --recursive
          make setup-thirdparty
      - name: Select Xcode 15.4
        run: | 
          sudo xcode-select -s /Applications/Xcode_15.4.app
      - name: Build and Package Rust XCFramework
        run: |
          make build-ios-bindings-release
          make zip-rust-xcframework
          make compute-rust-checksum
          make generate-package-swift

      - name: Commit and Push Package.swift
        if: ${{ env.SKIP_RELEASE != 'true' }}
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git checkout ${{ env.TARGET_BRANCH }}
          git add Package.swift
          git commit -m "chore: update package.swift for version ${{ github.event.inputs.version }}"
          git push origin HEAD:${{ env.TARGET_BRANCH }}

      - name: Create Release
        if: ${{ env.SKIP_RELEASE != 'true' }}
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}
        with:
          tag_name: ${{ github.event.inputs.version }}-test
          release_name: Yttrium ${{ github.event.inputs.version }}-test
          draft: false
          prerelease: true

      - name: Upload Rust XCFramework to Release
        if: ${{ env.SKIP_RELEASE != 'true' }}
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./Output/RustXcframework.xcframework.zip
          asset_name: RustXcframework.xcframework.zip
          asset_content_type: application/zip
